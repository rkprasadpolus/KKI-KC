/*
 * Kuali Coeus, a comprehensive research administration system for higher education.
 * 
 * Copyright 2005-2016 Kuali, Inc.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.kuali.coeus.s2sgen.impl.generate.support;

import gov.grants.apply.forms.nsfCoverPage12V12.NSFCoverPage12Document;
import gov.grants.apply.forms.nsfCoverPage12V12.NSFCoverPage12Document.NSFCoverPage12;
import gov.grants.apply.forms.nsfCoverPage12V12.NSFCoverPage12Document.NSFCoverPage12.NSFUnitConsideration;
import gov.grants.apply.forms.nsfCoverPage12V12.NSFCoverPage12Document.NSFCoverPage12.OtherInfo;
import gov.grants.apply.forms.nsfCoverPage12V12.NSFCoverPage12Document.NSFCoverPage12.PIInfo;
import gov.grants.apply.system.attachmentsV10.AttachedFileDataType;
import gov.grants.apply.system.attachmentsV10.AttachmentGroupMin1Max100DataType;
import gov.grants.apply.system.globalLibraryV20.YesNoDataType;
import org.apache.xmlbeans.XmlObject;
import org.kuali.coeus.common.api.type.ProposalTypeContract;
import org.kuali.coeus.common.api.ynq.YnqConstant;
import org.kuali.coeus.propdev.api.person.ProposalPersonContract;
import org.kuali.coeus.propdev.api.person.ProposalPersonYnqContract;
import org.kuali.coeus.propdev.api.ynq.ProposalYnqContract;
import org.kuali.coeus.propdev.api.core.ProposalDevelopmentDocumentContract;
import org.kuali.coeus.propdev.api.attachment.NarrativeContract;
import org.kuali.coeus.s2sgen.impl.generate.FormGenerator;
import org.kuali.coeus.s2sgen.impl.generate.FormVersion;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;


import java.util.ArrayList;
import java.util.List;

/**
 * 
 * This class is used to generate XML Document object for grants.gov
 * NSFCoverPageV1.2. This form is generated using XMLBean API's generated by
 * compiling NSFCoverPageV1.2 schema.
 * 
 * @author Kuali Research Administration Team (kualidev@oncourse.iu.edu)
 */
@FormGenerator("NSFCoverPageV1_2Generator")
public class NSFCoverPageV1_2Generator extends NSFCoverPageBaseGenerator {
	private static final String QUESTION_ID_ACCOMPLISHMENT_RENEWAL = "5";
	private static final String QUESTION_ID_ISCURRENT_PI = "19";
	private static final int PROGRAM_ANNOUNCEMENT_NUMBER_MAX_LENGTH = 40;

    @Value("http://apply.grants.gov/forms/NSF_CoverPage_1_2-V1.2")
    private String namespace;

    @Value("NSF_CoverPage_1_2-V1.2")
    private String formName;

    @Value("classpath:org/kuali/coeus/s2sgen/impl/generate/support/stylesheet/NSF_CoverPage-V1.2.xsl")
    private Resource stylesheet;

    @Value("gov.grants.apply.forms.nsfCoverPage12V12")
    private String packageName;

    @Value(DEFAULT_SORT_INDEX)
    private int sortIndex;

	/**
	 * 
	 * This method returns NSFCoverPage12Document object based on proposal
	 * development document which contains the NSFCoverPage12Document
	 * informations
	 * NSFUnitConsideration,FundingOpportunityNumber,PIInfo,CoPIInfo,OtherInfo,and
	 * SingleCopyDocuments for a particular proposal
	 * 
	 * @return nsfCoverPage12Document {@link XmlObject} of type
	 *         NSFCoverPage12Document.
	 */
	private NSFCoverPage12Document getNSFCoverPage12() {
		NSFCoverPage12Document nsfCoverPage12Document = NSFCoverPage12Document.Factory
				.newInstance();
		NSFCoverPage12 nsfCoverPage12 = NSFCoverPage12.Factory.newInstance();
		nsfCoverPage12.setFormVersion(FormVersion.v1_2.getVersion());
		setFundingOpportunityNumber(nsfCoverPage12);
		if (pdDoc.getDevelopmentProposal().getS2sOpportunity() != null) {
			nsfCoverPage12.setDueDate(pdDoc
					.getDevelopmentProposal().getS2sOpportunity()
					.getClosingDate());
		}
		nsfCoverPage12.setNSFUnitConsideration(getNSFUnitConsideration());
		nsfCoverPage12.setPIInfo(getPIInfo());
		nsfCoverPage12.setOtherInfo(getOtherInfo());
		AttachmentGroupMin1Max100DataType attachmentGroup = AttachmentGroupMin1Max100DataType.Factory
				.newInstance();
		attachmentGroup.setAttachedFileArray(getAttachedFileDataTypes());
		nsfCoverPage12.setSingleCopyDocuments(attachmentGroup);
		nsfCoverPage12Document.setNSFCoverPage12(nsfCoverPage12);
		return nsfCoverPage12Document;
	}

	private void setFundingOpportunityNumber(NSFCoverPage12 nsfCoverPage12) {
		if (pdDoc.getDevelopmentProposal().getProgramAnnouncementNumber() != null) {
			if (pdDoc.getDevelopmentProposal().getProgramAnnouncementNumber()
					.length() > PROGRAM_ANNOUNCEMENT_NUMBER_MAX_LENGTH) {
				nsfCoverPage12.setFundingOpportunityNumber(pdDoc
						.getDevelopmentProposal()
						.getProgramAnnouncementNumber().substring(0,
								PROGRAM_ANNOUNCEMENT_NUMBER_MAX_LENGTH));
			} else {
				nsfCoverPage12.setFundingOpportunityNumber(pdDoc
						.getDevelopmentProposal()
						.getProgramAnnouncementNumber());
			}
		}
	}

	/**
	 * 
	 * This method returns PIInfo informations such as
	 * DegreeType,DegreeYear,CurrentPI status, for the PI.
	 * 
	 * @return PIInfo object containing principal investigator Degree details.
	 */
	private PIInfo getPIInfo() {
		PIInfo pInfo = PIInfo.Factory.newInstance();
		pInfo.setIsCurrentPI(getYNQAnswer(QUESTION_ID_ISCURRENT_PI));
		return pInfo;
	}

	/**
	 * 
	 * This method returns Investigator
	 * status,DisclosureLobbyingActivities,ExploratoryResearch,HistoricPlaces,
	 * HighResolutionGraphics and AccomplishmentRenewal information for the
	 * OtherInfo type.
	 * 
	 * @return OtherInfo object containing other informations about the
	 *         principal investigator.
	 */
	private OtherInfo getOtherInfo() {
		OtherInfo otherInfo = OtherInfo.Factory.newInstance();
		YesNoDataType.Enum yesNoDataType = getYNQAnswer(QUESTION_ID_BEGIN_INVESTIGATOR);
		if (yesNoDataType != null) {
			otherInfo.setIsBeginInvestigator(yesNoDataType);
		}
		yesNoDataType = getLobbyingAnswer();
		if (yesNoDataType != null) {
			otherInfo.setIsDisclosureLobbyingActivities(yesNoDataType);
		}
		yesNoDataType = getYNQAnswer(QUESTION_ID_EXPLORATORY_RESEARCH);
		if (yesNoDataType != null) {
			otherInfo.setIsExploratoryResearch(yesNoDataType);
		}
		ProposalTypeContract proposalType = pdDoc.getDevelopmentProposal()
				.getProposalType();
		if (proposalType != null && proposalType.getCode() != null) {
			otherInfo
					.setIsAccomplishmentRenewal(proposalType.getCode()
							.equals(QUESTION_ID_ACCOMPLISHMENT_RENEWAL) ? YesNoDataType.Y_YES
							: YesNoDataType.N_NO);
		}
		yesNoDataType = getYNQAnswer(QUESTION_ID_RESOLUTION_GRAPHICS);
		if (yesNoDataType != null) {
			otherInfo.setIsHighResolutionGraphics(yesNoDataType);
		}
		return otherInfo;
	}

	/**
	 * 
	 * This method YesNo data type YNQ answers based on the ProposalYnq
	 * QuestionId
	 * 
	 * @param questionId
	 *            Proposal Ynq question id
	 * @return answer (YesNoDataType.Enum) corresponding to the question id.
	 */
	private YesNoDataType.Enum getYNQAnswer(String questionId) {
		YesNoDataType.Enum answer = null;
		for (ProposalYnqContract proposalYnq : pdDoc.getDevelopmentProposal()
				.getProposalYnqs()) {
			if (proposalYnq.getYnq() != null
					&& proposalYnq.getYnq().getQuestionId().equals(questionId)) {
				if (proposalYnq.getAnswer() != null) {
					answer = (proposalYnq.getAnswer().equals(
							YnqConstant.YES.code()) ? YesNoDataType.Y_YES
							: YesNoDataType.N_NO);
				}
			}
		}
		return answer;
	}

	/**
	 * 
	 * This method YesNo data type Lobbying answers based on the ProposalYnq
	 * QuestionId
	 * 
	 * @return answer (YesNoDataType.Enum) corresponding to Ynq question id.
	 */
	private YesNoDataType.Enum getLobbyingAnswer() {
		YesNoDataType.Enum answer = YesNoDataType.N_NO;
		for (ProposalPersonContract proposalPerson : pdDoc.getDevelopmentProposal()
				.getProposalPersons()) {
			if (proposalPerson.getProposalPersonRoleId() != null
					&& proposalPerson.getProposalPersonRoleId().equals(
							PRINCIPAL_INVESTIGATOR)
					|| proposalPerson.getProposalPersonRoleId().equals(
							PI_C0_INVESTIGATOR)) {
				for (ProposalPersonYnqContract personYnq : proposalPerson
						.getProposalPersonYnqs()) {
					if (personYnq != null) {
						if (personYnq.getQuestionId() != null
								&& personYnq.getQuestionId().equals(
										PROPOSAL_YNQ_LOBBYING_ACTIVITIES)) {
							if (personYnq.getAnswer() != null
									&& personYnq.getAnswer().equals(
											YnqConstant.YES.code())) {
								return YesNoDataType.Y_YES;
							}
						}
					}
				}
			}
		}
		return answer;
	}

	/**
	 * 
	 * This method returns DivisionCode and ProgramCode information for the
	 * NSFUnitConsideration type.
	 * 
	 * @return NSFUnitConsideration object containing unit consideration
	 *         informations like Division Code and Program code.
	 */
	private NSFUnitConsideration getNSFUnitConsideration() {
		NSFUnitConsideration nsfConsideration = NSFUnitConsideration.Factory
				.newInstance();
		nsfConsideration.setDivisionCode(pdDoc.getDevelopmentProposal()
				.getAgencyDivisionCode());
		nsfConsideration.setProgramCode(pdDoc.getDevelopmentProposal()
				.getAgencyProgramCode());
		return nsfConsideration;
	}

	/**
	 * 
	 * This method returns attachment type for the form and it can be of type
	 * Personal Data or Proprietary Information.
	 * 
	 * @return AttachedFileDataType[] array of attachments based on the
	 *         narrative type code.
	 */
	private AttachedFileDataType[] getAttachedFileDataTypes() {
		List<AttachedFileDataType> attachedFileDataTypeList = new ArrayList<>();
		for (NarrativeContract narrative : pdDoc.getDevelopmentProposal()
				.getNarratives()) {
			if (narrative.getNarrativeType().getCode() != null) {
				int narrativeTypeCode = Integer.parseInt(narrative.getNarrativeType().getCode());
				if (narrativeTypeCode == PERSONAL_DATA
						|| narrativeTypeCode == PROPRIETARY_INFORMATION 
						|| narrativeTypeCode == SINGLE_COPY_DOCUMENT) {
                    AttachedFileDataType attachedFileDataType = getAttachedFileType(narrative);
					if(attachedFileDataType != null){
						attachedFileDataTypeList.add(attachedFileDataType);
					}
				}
			}
		}
		return attachedFileDataTypeList.toArray(new AttachedFileDataType[attachedFileDataTypeList
		          						.size()]);
	}

	/**
	 * This method creates {@link XmlObject} of type
	 * {@link NSFCoverPage12Document} by populating data from the given
	 * {@link ProposalDevelopmentDocumentContract}
	 * 
	 * @param proposalDevelopmentDocument
	 *            for which the {@link XmlObject} needs to be created
	 * @return {@link XmlObject} which is generated using the given
	 *         {@link ProposalDevelopmentDocumentContract}
	 */
	@Override
	public NSFCoverPage12Document getFormObject(
			ProposalDevelopmentDocumentContract proposalDevelopmentDocument) {
		this.pdDoc = proposalDevelopmentDocument;
		return getNSFCoverPage12();
	}

    @Override
    public String getNamespace() {
        return namespace;
    }

    public void setNamespace(String namespace) {
        this.namespace = namespace;
    }

    @Override
    public String getFormName() {
        return formName;
    }

    public void setFormName(String formName) {
        this.formName = formName;
    }

    @Override
    public Resource getStylesheet() {
        return stylesheet;
    }

    public void setStylesheet(Resource stylesheet) {
        this.stylesheet = stylesheet;
    }

    @Override
    public String getPackageName() {
        return packageName;
    }

    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    @Override
    public int getSortIndex() {
        return sortIndex;
    }

    public void setSortIndex(int sortIndex) {
        this.sortIndex = sortIndex;
    }
}
